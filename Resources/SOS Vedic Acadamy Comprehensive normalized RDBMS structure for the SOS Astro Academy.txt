Comprehensive normalized RDBMS structure for the SOS Astro Academy. Here are the key features:
Database Structure Highlights:
Core Entity Tables (15 tables)
* Certification Levels - Stores the 4 certification levels with fees and requirements
* Curriculum Organization - Months, Weeks, Topics, and Practical Exercises hierarchically linked
* Assessments - Different assessment types with scoring details
Student Management (8 tables)
* Student profiles, enrollments, progress tracking
* Assessment results and certifications awarded
* Complete student lifecycle from enrollment to certification
Faculty & Mentorship (3 tables)
* Faculty profiles with specializations
* Mentor-student assignments
* Session tracking for mentorship meetings
Learning Resources (4 tables)
* Resource types (videos, documents, etc.)
* Resource library with metadata
* Week-resource mappings for curriculum structure
Financial Management (2 tables)
* Course packages with pricing
* Payment tracking with installments
Communication & Engagement (5 tables)
* Live sessions with recordings
* Attendance tracking
* Discussion forum with topics and posts
Quality Assurance (1 table)
* Student feedback across multiple dimensions
Views for Reporting
* Active students summary with progress
* Student performance metrics
* Revenue analysis
Key Design Principles:
? 3NF Normalization - Eliminates redundancy ? Referential Integrity - Foreign keys maintain data consistency ? Indexing Strategy - Optimized for common queries ? Scalability - Can handle thousands of students ? Audit Trail - Created/updated timestamps ? Flexibility - Easy to extend with new features
This structure supports all aspects of the academy from enrollment to certification and career tracking!

-- ============================================
-- SOS ASTRO ACADEMY DATABASE SCHEMA
-- Normalized RDBMS Structure with Module Prefixes
-- ============================================

-- MODULE PREFIXES:
-- CUR_ = Curriculum Management
-- ASM_ = Assessment Management
-- PKG_ = Package & Pricing
-- FAC_ = Faculty & Mentorship
-- STU_ = Student Management
-- RES_ = Learning Resources
-- PLT_ = Platform Features
-- CAR_ = Career Support
-- PAY_ = Payment & Financial
-- COM_ = Communication & Collaboration
-- QUA_ = Quality Assurance

-- ============================================
-- CURRICULUM MANAGEMENT MODULE (CUR_)
-- ============================================

-- Certification Levels
CREATE TABLE cur_certification_levels (
    level_id INT PRIMARY KEY AUTO_INCREMENT,
    level_name VARCHAR(100) NOT NULL,
    level_type ENUM('Foundation', 'Practitioner', 'Professional', 'Master') NOT NULL,
    duration_months INT NOT NULL,
    duration_weeks INT NOT NULL,
    duration_days INT NOT NULL,
    sequence_order INT NOT NULL,
    passing_score_percentage DECIMAL(5,2) NOT NULL,
    fee_usd DECIMAL(10,2) NOT NULL,
    description TEXT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    UNIQUE KEY uk_level_type (level_type)
);

-- Months (Curriculum Organization)
CREATE TABLE cur_months (
    month_id INT PRIMARY KEY AUTO_INCREMENT,
    level_id INT NOT NULL,
    month_number INT NOT NULL,
    month_title VARCHAR(200) NOT NULL,
    description TEXT,
    FOREIGN KEY (level_id) REFERENCES cur_certification_levels(level_id) ON DELETE CASCADE,
    UNIQUE KEY uk_level_month (level_id, month_number)
);

-- Weeks (Detailed Curriculum Breakdown)
CREATE TABLE cur_weeks (
    week_id INT PRIMARY KEY AUTO_INCREMENT,
    month_id INT NOT NULL,
    week_start INT NOT NULL,
    week_end INT NOT NULL,
    week_title VARCHAR(200) NOT NULL,
    theory_hours DECIMAL(5,2) DEFAULT 0,
    practical_hours DECIMAL(5,2) DEFAULT 0,
    self_study_hours DECIMAL(5,2) DEFAULT 0,
    description TEXT,
    FOREIGN KEY (month_id) REFERENCES cur_months(month_id) ON DELETE CASCADE,
    INDEX idx_month_weeks (month_id, week_start)
);

-- Topics
CREATE TABLE cur_topics (
    topic_id INT PRIMARY KEY AUTO_INCREMENT,
    week_id INT NOT NULL,
    topic_title VARCHAR(300) NOT NULL,
    topic_order INT NOT NULL,
    topic_description TEXT,
    is_core_topic BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (week_id) REFERENCES cur_weeks(week_id) ON DELETE CASCADE,
    INDEX idx_week_topics (week_id, topic_order)
);

-- Practical Exercises
CREATE TABLE cur_practical_exercises (
    exercise_id INT PRIMARY KEY AUTO_INCREMENT,
    week_id INT NOT NULL,
    exercise_title VARCHAR(300) NOT NULL,
    exercise_description TEXT,
    exercise_order INT NOT NULL,
    estimated_duration_hours DECIMAL(5,2),
    difficulty_level ENUM('Beginner', 'Intermediate', 'Advanced', 'Master') NOT NULL,
    FOREIGN KEY (week_id) REFERENCES cur_weeks(week_id) ON DELETE CASCADE,
    INDEX idx_week_exercises (week_id, exercise_order)
);

-- ============================================
-- ASSESSMENT MANAGEMENT MODULE (ASM_)
-- ============================================

-- Assessment Types
CREATE TABLE asm_types (
    assessment_type_id INT PRIMARY KEY AUTO_INCREMENT,
    type_name VARCHAR(100) NOT NULL,
    description TEXT,
    UNIQUE KEY uk_type_name (type_name)
);

-- Assessments
CREATE TABLE asm_assessments (
    assessment_id INT PRIMARY KEY AUTO_INCREMENT,
    level_id INT NOT NULL,
    assessment_type_id INT NOT NULL,
    assessment_name VARCHAR(200) NOT NULL,
    duration_hours DECIMAL(5,2),
    max_marks INT,
    quantity INT DEFAULT 1,
    description TEXT,
    FOREIGN KEY (level_id) REFERENCES cur_certification_levels(level_id) ON DELETE CASCADE,
    FOREIGN KEY (assessment_type_id) REFERENCES asm_types(assessment_type_id),
    INDEX idx_level_assessments (level_id)
);

-- ============================================
-- PACKAGE & PRICING MODULE (PKG_)
-- ============================================

-- Course Packages
CREATE TABLE pkg_course_packages (
    package_id INT PRIMARY KEY AUTO_INCREMENT,
    package_name VARCHAR(100) NOT NULL,
    package_type ENUM('Complete', 'Level-by-Level', 'Fast-Track') NOT NULL,
    total_fee_usd DECIMAL(10,2) NOT NULL,
    duration_months INT NOT NULL,
    hours_per_week INT,
    savings_usd DECIMAL(10,2) DEFAULT 0,
    payment_plan_available BOOLEAN DEFAULT FALSE,
    payment_installments INT,
    description TEXT,
    is_active BOOLEAN DEFAULT TRUE,
    UNIQUE KEY uk_package_type (package_type)
);

-- Package Inclusions
CREATE TABLE pkg_inclusions (
    inclusion_id INT PRIMARY KEY AUTO_INCREMENT,
    package_id INT NOT NULL,
    inclusion_item VARCHAR(300) NOT NULL,
    inclusion_order INT NOT NULL,
    FOREIGN KEY (package_id) REFERENCES pkg_course_packages(package_id) ON DELETE CASCADE,
    INDEX idx_package_inclusions (package_id, inclusion_order)
);

-- ============================================
-- FACULTY & MENTORSHIP MODULE (FAC_)
-- ============================================

-- Faculty
CREATE TABLE fac_faculty (
    faculty_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(20),fmentor
    years_of_experience INT,
    specialization VARCHAR(200),
    bio TEXT,
    is_lead_faculty BOOLEAN DEFAULT FALSE,
    is_guest_faculty BOOLEAN DEFAULT FALSE,
    traditional_lineage VARCHAR(200),
    published_works TEXT,
    profile_image_url VARCHAR(500),
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
);

-- Mentor Requirements
CREATE TABLE fac_mentor_requirements (
    requirement_id INT PRIMARY KEY AUTO_INCREMENT,
    level_id INT NOT NULL,
    mentor_type VARCHAR(100) NOT NULL,
    student_ratio VARCHAR(20) NOT NULL,
    description TEXT,
    FOREIGN KEY (level_id) REFERENCES cur_certification_levels(level_id) ON DELETE CASCADE
);

-- Student Mentor Assignments
CREATE TABLE fac_student_mentors (
    assignment_id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT NOT NULL,
    faculty_id INT NOT NULL,
    level_id INT NOT NULL,
    assigned_date DATE NOT NULL,
    end_date DATE,
    is_active BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (student_id) REFERENCES stu_students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (faculty_id) REFERENCES fac_faculty(faculty_id),
    FOREIGN KEY (level_id) REFERENCES cur_certification_levels(level_id),
    INDEX idx_active_assignments (is_active),
    INDEX idx_student_mentor (student_id, faculty_id)
);

-- Mentorship Sessions
CREATE TABLE fac_mentorship_sessions (
    session_id INT PRIMARY KEY AUTO_INCREMENT,
    assignment_id INT NOT NULL,
    session_date DATETIME NOT NULL,
    duration_minutes INT,
    session_type ENUM('One-on-One', 'Group', 'Emergency', 'Project Review') NOT NULL,
    topic_discussed VARCHAR(300),
    notes TEXT,
    student_feedback_rating INT CHECK (student_feedback_rating BETWEEN 1 AND 5),
    FOREIGN KEY (assignment_id) REFERENCES fac_student_mentors(assignment_id) ON DELETE CASCADE,
    INDEX idx_session_date (session_date)
);

-- ============================================
-- STUDENT MANAGEMENT MODULE (STU_)
-- ============================================

-- Students
CREATE TABLE stu_students (
    student_id INT PRIMARY KEY AUTO_INCREMENT,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    email VARCHAR(255) UNIQUE NOT NULL,
    phone VARCHAR(20),
    whatsapp VARCHAR(20),
    country VARCHAR(100),
    enrollment_date DATE NOT NULL,
    current_level_id INT,
    sos_astro_account_id VARCHAR(100),
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (current_level_id) REFERENCES cur_certification_levels(level_id),
    INDEX idx_enrollment_date (enrollment_date),
    INDEX idx_active_students (is_active)
);

-- Student Enrollments
CREATE TABLE stu_enrollments (
    enrollment_id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT NOT NULL,
    package_id INT NOT NULL,
    level_id INT NOT NULL,
    enrollment_date DATE NOT NULL,
    start_date DATE,
    expected_completion_date DATE,
    actual_completion_date DATE,
    status ENUM('Enrolled', 'In Progress', 'Completed', 'Dropped', 'On Hold') NOT NULL DEFAULT 'Enrolled',
    payment_status ENUM('Pending', 'Partial', 'Paid', 'Refunded') NOT NULL DEFAULT 'Pending',
    FOREIGN KEY (student_id) REFERENCES stu_students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (package_id) REFERENCES pkg_course_packages(package_id),
    FOREIGN KEY (level_id) REFERENCES cur_certification_levels(level_id),
    INDEX idx_student_status (student_id, status),
    INDEX idx_enrollment_date (enrollment_date)
);

-- Student Progress
CREATE TABLE stu_progress (
    progress_id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT NOT NULL,
    week_id INT NOT NULL,
    completion_percentage DECIMAL(5,2) DEFAULT 0,
    status ENUM('Not Started', 'In Progress', 'Completed', 'Skipped') DEFAULT 'Not Started',
    started_date DATE,
    completed_date DATE,
    notes TEXT,
    FOREIGN KEY (student_id) REFERENCES stu_students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (week_id) REFERENCES cur_weeks(week_id) ON DELETE CASCADE,
    UNIQUE KEY uk_student_week (student_id, week_id),
    INDEX idx_student_progress (student_id, status)
);

-- Student Assessments
CREATE TABLE stu_assessments (
    student_assessment_id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT NOT NULL,
    assessment_id INT NOT NULL,
    attempt_number INT DEFAULT 1,
    assessment_date DATE,
    marks_obtained DECIMAL(5,2),
    max_marks DECIMAL(5,2),
    percentage DECIMAL(5,2),
    passed BOOLEAN DEFAULT FALSE,
    feedback TEXT,
    evaluated_by INT,
    evaluated_date DATE,
    FOREIGN KEY (student_id) REFERENCES stu_students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (assessment_id) REFERENCES asm_assessments(assessment_id),
    FOREIGN KEY (evaluated_by) REFERENCES fac_faculty(faculty_id),
    INDEX idx_student_assessments (student_id, assessment_id)
);

-- Certifications Awarded
CREATE TABLE stu_certifications (
    certification_id INT PRIMARY KEY AUTO_INCREMENT,
    student_id INT NOT NULL,
    level_id INT NOT NULL,
    issue_date DATE NOT NULL,
    certificate_number VARCHAR(100) UNIQUE NOT NULL,
    blockchain_hash VARCHAR(200),
    verification_url VARCHAR(500),
    is_active BOOLEAN DEFAULT TRUE,
    revoked_date DATE,
    revocation_reason TEXT,
    FOREIGN KEY (student_id) REFERENCES stu_students(student_id) ON DELETE CASCADE,
    FOREIGN KEY (level_id) REFERENCES cur_certification_levels(level_id),
    INDEX idx_student_certs (student_id),
    INDEX idx_cert_number (certificate_number)
);

-- ============================================
-- LEARNING RESOURCES MODULE (RES_)
-- ============================================

-- Resource Types
CREATE TABLE res_types (
    resource_type_id INT PRIMARY KEY AUTO_INCREMENT,
    type_name VARCHAR(100) NOT NULL,
    description TEXT,
    UNIQUE KEY uk_type_name (type_name)
);

-- Learning Resources
CREATE TABLE res_resources (
    resource_id INT PRIMARY KEY AUTO_INCREMENT,
    resource_type_id INT NOT NULL,
    resource_title VARCHAR(300) NOT NULL,
    description TEXT,
    file_url VARCHAR(500),
    duration_minutes INT,
    is_premium BOOLEAN DEFAULT FALSE,
    created_date DATE,
    created_by INT,
    FOREIGN KEY (resource_type_id) REFERENCES res_types(resource_type_id),
    FOREIGN KEY (created_by) REFERENCES fac_faculty(faculty_id),
    INDEX idx_resource_type (resource_type_id)
);

-- Week Resources (Mapping)
CREATE TABLE res_week_mapping (
    week_resource_id INT PRIMARY KEY AUTO_INCREMENT,
    week_id INT NOT NULL,
    resource_id INT NOT NULL,
    resource_order INT NOT NULL,
    is_mandatory BOOLEAN DEFAULT TRUE,
    FOREIGN KEY (week_id) REFERENCES cur_weeks(week_id) ON DELETE CASCADE

-- ============================================
-- INDEXES FOR PERFORMANCE OPTIMIZATION
-- ============================================

CREATE INDEX idx_students_email ON students(email);
CREATE INDEX idx_students_active ON students(is_active, current_level_id);
CREATE INDEX idx_enrollments_status ON student_enrollments(status, level_id);
CREATE INDEX idx_progress_completion ON student_progress(student_id, completion_percentage);
CREATE INDEX idx_certifications_issue_date ON certifications_awarded(issue_date);
CREATE INDEX idx_payments_status ON payments(payment_status, payment_date);

-- ============================================
-- VIEWS FOR COMMON QUERIES
-- ============================================

-- Active Students Summary
CREATE VIEW v_active_students_summary AS
SELECT 
    s.student_id,
    CONCAT(s.first_name, ' ', s.last_name) AS student_name,
    s.email,
    cl.level_name,
    se.status AS enrollment_status,
    se.start_date,
    se.expected_completion_date,
    COUNT(DISTINCT sp.week_id) AS weeks_completed,
    AVG(sp.completion_percentage) AS avg_completion_percentage
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN certification_levels cl ON se.level_id = cl.level_id
LEFT JOIN student_progress sp ON s.student_id = sp.student_id AND sp.status = 'Completed'
WHERE s.is_active = TRUE AND se.status = 'In Progress'
GROUP BY s.student_id, s.first_name, s.last_name, s.email, cl.level_name, se.status, se.start_date, se.expected_completion_date;

-- Student Performance Summary
CREATE VIEW v_student_performance AS
SELECT 
    s.student_id,
    CONCAT(s.first_name, ' ', s.last_name) AS student_name,
    cl.level_name,
    COUNT(sa.student_assessment_id) AS total_assessments,
    AVG(sa.percentage) AS avg_score,
    SUM(CASE WHEN sa.passed = TRUE THEN 1 ELSE 0 END) AS passed_assessments
FROM students s
JOIN student_enrollments se ON s.student_id = se.student_id
JOIN certification_levels cl ON se.level_id = cl.level_id
LEFT JOIN student_assessments sa ON s.student_id = sa.student_id
GROUP BY s.student_id, s.first_name, s.last_name, cl.level_name;

-- Revenue Summary
CREATE VIEW v_revenue_summary AS
SELECT 
    DATE_FORMAT(p.payment_date, '%Y-%m') AS month_year,
    cp.package_name,
    COUNT(DISTINCT se.student_id) AS students_enrolled,
    SUM(p.amount_usd) AS total_revenue
FROM payments p
JOIN student_enrollments se ON p.enrollment_id = se.enrollment_id
JOIN course_packages cp ON se.package_id = cp.package_id
WHERE p.payment_status = 'Completed'
GROUP BY DATE_FORMAT(p.payment_date, '%Y-%m'), cp.package_name;

-- ============================================
-- END OF SCHEMA
-- ============================================

